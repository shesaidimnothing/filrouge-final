const testLoginFix = async () => {
  const testEmail = 'test@example.com';
  const wrongPassword = 'wrongpassword';
  const correctPassword = 'password123'; // Assurez-vous que cet utilisateur existe
  
  console.log('üß™ Test de correction du syst√®me de blocage');
  console.log('==========================================');
  
  // Test 1: Cr√©er un utilisateur de test (si n√©cessaire)
  console.log('\n1Ô∏è‚É£ Cr√©ation d\'un utilisateur de test...');
  try {
    const createResponse = await fetch('http://localhost:3000/api/auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: 'Test User',
        email: testEmail,
        password: correctPassword,
        consentMarketing: true,
        consentNewsletter: false
      })
    });
    
    if (createResponse.ok) {
      console.log('‚úÖ Utilisateur cr√©√© avec succ√®s');
    } else {
      const data = await createResponse.json();
      if (data.error && data.error.includes('d√©j√† utilis√©')) {
        console.log('‚ÑπÔ∏è Utilisateur d√©j√† existant');
      } else {
        console.log('‚ùå Erreur cr√©ation:', data);
      }
    }
  } catch (error) {
    console.log('‚ÑπÔ∏è Utilisateur probablement d√©j√† existant');
  }
  
  // Test 2: Premi√®re tentative √©chou√©e
  console.log('\n2Ô∏è‚É£ Premi√®re tentative √©chou√©e...');
  try {
    const response1 = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: testEmail, password: wrongPassword })
    });
    const data1 = await response1.json();
    console.log('Status:', response1.status);
    console.log('R√©ponse:', data1);
  } catch (error) {
    console.error('Erreur:', error);
  }
  
  // Test 3: Deuxi√®me tentative √©chou√©e
  console.log('\n3Ô∏è‚É£ Deuxi√®me tentative √©chou√©e...');
  try {
    const response2 = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: testEmail, password: wrongPassword })
    });
    const data2 = await response2.json();
    console.log('Status:', response2.status);
    console.log('R√©ponse:', data2);
  } catch (error) {
    console.error('Erreur:', error);
  }
  
  // Test 4: Troisi√®me tentative √©chou√©e (devrait bloquer)
  console.log('\n4Ô∏è‚É£ Troisi√®me tentative √©chou√©e (devrait bloquer)...');
  try {
    const response3 = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: testEmail, password: wrongPassword })
    });
    const data3 = await response3.json();
    console.log('Status:', response3.status);
    console.log('R√©ponse:', data3);
  } catch (error) {
    console.error('Erreur:', error);
  }
  
  // Test 5: Attendre 35 secondes pour que le blocage expire
  console.log('\n5Ô∏è‚É£ Attente de 35 secondes pour que le blocage expire...');
  await new Promise(resolve => setTimeout(resolve, 35000));
  console.log('‚úÖ Attente termin√©e');
  
  // Test 6: Tentative avec le bon mot de passe apr√®s expiration du blocage
  console.log('\n6Ô∏è‚É£ Tentative avec le bon mot de passe apr√®s expiration...');
  try {
    const response6 = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: testEmail, password: correctPassword })
    });
    const data6 = await response6.json();
    console.log('Status:', response6.status);
    console.log('R√©ponse:', data6);
    
    if (response6.ok) {
      console.log('‚úÖ SUCC√àS : Connexion r√©ussie apr√®s expiration du blocage');
    } else {
      console.log('‚ùå √âCHEC : Connexion √©chou√©e apr√®s expiration du blocage');
    }
  } catch (error) {
    console.error('Erreur:', error);
  }
  
  console.log('\n‚úÖ Test termin√©');
};

testLoginFix(); 